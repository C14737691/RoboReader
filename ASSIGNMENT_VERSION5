/*This tool will allow a user to automatically identify what a document is about. 
Imagine you have a text document and you need to automatically identify what it is about.  
As a human that’s easy – just read it.  For this tool, the answer will be the ten most 
common words from the document  - in the hope that these convey the topic – it’s up to 
the user to put meaning on the set of words when they see the answer.
The most basic version of the tool is that  the user enters a file name at the command line, 
and the system returns the top ten words (with word counts)  such as Christmas (12), train(6) etc.
So the words returned should be informative.  E.g. if there is a document about 
Christmas activities in Dublin City Centre, the words from the document that might convey what this document is about are:
Christmas, Dublin, City, Centre,  Activities, Shops, People, Tree, Lights etc
It certainly wouldn’t help to have words such as “is, “a, “this”.. etc. 
And nouns help too  - so perhaps there is a way of identifying unhelpful words?

Advanced features might include things such as:
•	A GUI to run this 
•	A GUI to display the results back
•	The ability for the user to say what words to exclude form the topic finder.
•	What else?
1.the user enters a file name at the command line
2.the system returns the top ten words (with word counts)
3.the ability for the user to say what words to exclude form the topic finder
*/
package com.assignment.oop;

import javax.swing.JFrame;

/*
 * *******************************
 * Assignment. Topic: Robo-Reader
 * Date: 28/02/16
 * @author Nataliya Kizyuk
 * *******************************
 */
public class RoboToolControl 
{
    public static void main(String[] args)throws Exception 
    {
        System.out.println("Welcome to the Robo-Reader tool!");
        System.out.println("This tool will allow you to automatically identify what the document is about.");
        //instanciating class TxtDocument to run current program from terminal
        TxtDocument userDocument = new TxtDocument();
    }   
}


package com.assignment.oop;

/**
 * 22/03/2016
 * @author Nataliya Kizyuk
 */
public final class TxtDocument 
{
    private String docName;
    private StringBuffer docContents;
    private String wordsToExclude;
    private String docDescription;
    
    public TxtDocument()
    {
        this.docName = new InputGetter().GetName();
        System.out.println("Name of the document to read is:"+this.getDocName());
        this.docContents = new DocumentReader().ReadDocument(this.docName);
        //this.wordsToExclude = wordsToExclude;
        this.docDescription = new WordCounter(this.getDocContents()).DisplayTenMostUsed();
        System.out.println("The " + this.docName+" is about: ");  
    }      

    public String getDocName() 
    {
        return docName;
    }

    public void setDocName(String docName)
    {
        this.docName = docName;
    }

    public StringBuffer getDocContents() 
    {
        return docContents;
    }

    public void setDocContents(StringBuffer docContents) 
    {
        this.docContents = docContents;
    }

    public String getWordsToExclude() 
    {
        return wordsToExclude;
    }

    public void setWordsToExclude(String wordsToExclude) 
    {
        this.wordsToExclude = wordsToExclude;
    }
}


package com.assignment.oop;

import java.util.Scanner;
 /*
 * *******************************
 * Assignment. Topic: Robo-Reader
 * Date: 28/02/16
 * @author Nataliya Kizyuk
 * *******************************
 */
public class InputGetter 
{
    protected String document_name;
    protected Scanner inputReader;
    private boolean returnVal;
    private String expectedInput;
    
    public String GetName()
    {
        //to get input (file name)from user from command prompt
        this.inputReader = new Scanner(System.in);
        
        //display message to the user
        System.out.println("Please enter the name of the text document in the format:  document_name.txt ");

        //Getting input in String format
        this.document_name = this.inputReader.nextLine();
        //Checking if inputed String name is ending with ".txt"
        this.document_name = CheckName(this.document_name);
        
        return this.document_name;
    }  
    
    public String CheckName(String documentName)
    {
        //Checking if inputed String name is ending with ".txt"
        this.returnVal = documentName.endsWith(".txt");
        
        if(this.returnVal == true)
        {
            System.out.println( "The name of the document that you want to identify is: " + documentName);
            this.expectedInput = documentName;
        }
        else
        {
            //add(concatenate)".txt" to a document name and save it to the String variable
            this.expectedInput = documentName.concat(".txt");
          
            System.out.println("Invalid  format of input!!! You entered " + documentName + ", instead of " + this.expectedInput);    
        }
        return this.expectedInput;
    } 
}


package com.assignment.oop;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;
 /*
 * *******************************
 * Assignment. Topic: Robo-Reader
 * Date: 28/02/16
 * @author Nataliya Kizyuk
 * *******************************
 *Method: Read Document */
public class DocumentReader 
{
    protected File myDocument;
    protected Scanner myScanner;
    private String word;
    protected StringBuffer wordsString;
    
    public StringBuffer ReadDocument(String documentName)
    {
        try
        { 
            this.myDocument  =  new File(documentName);
            this.myScanner   =  new Scanner(this.myDocument);
            this.wordsString =  new StringBuffer();
            
            System.out.println("Document reader will read "+ documentName);
            System.out.println(this.myScanner.hasNextLine());
            
            while(myScanner.hasNextLine())
            {
                this.word = myScanner.next().toLowerCase();

                this.wordsString.append(this.word + " ");  
            }
            this.myScanner.close();
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        
        return this.wordsString;
    }
}


package com.assignment.oop;
import java.io.File;
import java.util.ArrayList; //reference: https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html
import java.util.AbstractCollection;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;
 /*
 * *******************************
 * Assignment. Topic: Robo-Reader
 * Date: 01/03/16
 * @author Nataliya Kizyuk
 * *******************************
 */
public class WordCounter 
{ 
    private String currentWord;
    private String nextWord;
    private StringBuilder docDescription;
    private ArrayList <Word> finalList;
    private String[] wordsArray;
    private int counter;
    
    public WordCounter(StringBuffer text)
    {
        this.finalList = new ArrayList();
        this.wordsArray = text.toString().split(" ");
        this.docDescription = new StringBuilder();
        try
        {
            for (int i = 0; i < this.wordsArray.length; i++)
            {    
                this.currentWord = wordsArray[i];
                this.counter = 1;
                if(this.currentWord.length()>4)
                {
                    for(int j = 0; j < this.wordsArray.length; j++)
                    {
                        this.nextWord = wordsArray[j];
                        if(this.currentWord.equals(this.nextWord))
                        {
                            this.counter++; 
                            this.wordsArray[j] = "";
                        }   
                    }
                    Word word = new Word();
                    word.setWordValue(currentWord);
                    word.setWordOccurences(counter);
                  
                    this.finalList.add(word);
                }  
            }
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
    public String DisplayTenMostUsed()
    { 
        try
        {
        //reference for Collections: http://beginnersbook.com/2013/12/sort-arraylist-in-descending-order-in-java/
        Collections.sort(this.finalList, Collections.reverseOrder()); 
        for(int i = 0; i < 10; i++)
        { 
            this.currentWord = this.finalList.get(i).toString();
            this.docDescription.append(this.currentWord.toUpperCase()+", ");
        } 
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        return this.docDescription.toString();
    }
}


package com.assignment.oop;
/*
 * *******************************
 * Assignment. Topic: Robo-Reader
 * Date: 02/03/16
 * @author Nataliya Kizyuk
 * *******************************
 
*reference: http://beginnersbook.com/2013/12/java-arraylist-of-object-sort-example-comparable-and-comparator/*/
public final class Word implements Comparable<Word>
{
    private String wordValue;
    private int    wordOccurences;

    /**
     *constructor
     */
    public Word() 
    {
        this.setWordValue(wordValue);
        this.setWordOccurences(wordOccurences);   
    }
    
   @Override
    public String toString() 
    {
        return this.wordValue+"("+Integer.toString(this.wordOccurences)+")";
    }

    /**
     * @return the wordValue
     */
    public String getWordValue() 
    {
        return wordValue;
    }

    /**
     * @param wordValue the wordValue to set
     */
    public void setWordValue(String wordValue) 
    {
        this.wordValue = wordValue;
    }

    /**
     * @return the wordNumber
     */
    public int getWordOccurences() 
    {
        return wordOccurences;
    }

    /**
     * @param wordOccurences the wordNumber to set
     */
    public void setWordOccurences(int wordOccurences) 
    {
        this.wordOccurences = wordOccurences;
    }

    @Override
    public int compareTo(Word compareWord) 
    {
        int compareOccurences =((Word)compareWord).getWordOccurences();

        /* For Descending order */
        return this.wordOccurences - compareOccurences;
    }
}

