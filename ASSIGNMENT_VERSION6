/*This tool will allow a user to automatically identify what a document is about. 
Imagine you have a text document and you need to automatically identify what it is about.  
As a human that’s easy – just read it.  For this tool, the answer will be the ten most 
common words from the document  - in the hope that these convey the topic – it’s up to 
the user to put meaning on the set of words when they see the answer.
The most basic version of the tool is that  the user enters a file name at the command line, 
and the system returns the top ten words (with word counts)  such as Christmas (12), train(6) etc.
So the words returned should be informative.  E.g. if there is a document about 
Christmas activities in Dublin City Centre, the words from the document that might convey what this document is about are:
Christmas, Dublin, City, Centre,  Activities, Shops, People, Tree, Lights etc
It certainly wouldn’t help to have words such as “is, “a, “this”.. etc. 
And nouns help too  - so perhaps there is a way of identifying unhelpful words?

Advanced features might include things such as:
•	A GUI to run this 
•	A GUI to display the results back
•	The ability for the user to say what words to exclude form the topic finder.
•	What else?
1.the user enters a file name at the command line
2.the system returns the top ten words (with word counts)
3.the ability for the user to say what words to exclude form the topic finder
*/
package com.assignment.oop;

import javax.swing.JFrame;

/*
 * *******************************
 * Assignment. Topic: Robo-Reader
 * Date: 28/02/16
 * @author Nataliya Kizyuk
 * *******************************
 */
public class RoboToolControl //main class
{
    public static void main(String[] args)throws Exception 
    {
        String title = "Welcome to the Robo-Reader tool!";
      
        //instancing class RoboScreen to run current program from Java GUI
        RoboScreen gui = new RoboScreen(title);
        RoboScreenInputOutput inputAction = new RoboScreenInputOutput(title);     
    }   
}

package com.assignment.oop;

import java.awt.*;
import javax.swing.*;
/**
 * Assignment. Topic: Robo-Reader
 * 18/03/2016
 * @author Nataliya Kizyuk
 * * *******************************
   Class that displays GUI to user
 */
public class RoboScreen extends JFrame 
{
    //parameters/arguments
    public JButton button1, button2; 
    public JLabel emptyLabel,imageLabel,label1, label2, label3;
    static JTextField textField1,textField2;
    public JTextArea outputText;
    public ImageIcon icon1,icon2;
    public int columns = 30;
    
    // constructor
    public RoboScreen(String title) 
    {
    	super(title);
        
    	setLayout(new FlowLayout());
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1400,900);
        setLocation(1200,600);
        setResizable(false);
        
        //REFERENCE: https://docs.oracle.com/javase/tutorial/uiswing/components/icon.html
        icon1 = new ImageIcon("image.jpg");//to add image to the label
        icon2 = new ImageIcon("image2.jpg");
        
        label1 = new JLabel("This tool will allow you to automatically identify "
                           + "what the document is about.  ",icon1,JLabel.CENTER);
        label1.setFont(new Font("Serif", Font.BOLD, 28));
        add(label1);
        
        //REFERENCE: https://docs.oracle.com/javase/tutorial/uiswing/components/html.html
        label2 = new JLabel("<html><font color=#CC0000; size = 6>        Please "
                           + "enter the name of the text document in the format: "
                           + "document_name.txt</font></html>",JLabel.CENTER);
        add(label2);
        
        textField1 = new JTextField(" Enter the document's name here  ",columns);
        textField1.setToolTipText("Enter the name of text document here");
        textField1.setFont(new Font("Serif", Font.PLAIN, 24));
        add(textField1);
        
        button1 = new JButton("<html><font size = 5>Click here to continue</font></html>");
        add(button1);

        label3 = new JLabel("<html><font color=#CC0000; size = 6>      Please enter "
                           + "the words that you would like to exclude separated by coma "
                           + "(e.g.: the, it, is, a, there):  </font></html>",JLabel.CENTER);
        add(label3);
        
        textField2 = new JTextField(" Enter the words to exclude here ",columns);
        textField2.setToolTipText("Enter the words to exclude here");
        textField2.setFont(new Font("Serif", Font.PLAIN, 24));
        add(textField2);
      
        button2 = new JButton("<html><font size = 5>Click here to continue</font></html>");
       	add(button2);
        
        imageLabel = new JLabel("",icon2,JLabel.CENTER);
        add(imageLabel);
     
        //reference: https://docs.oracle.com/javase/tutorial/uiswing/components/textarea.html
        outputText = new JTextArea(4,40);
        outputText.setBackground(Color.WHITE);
        outputText.setBorder(BorderFactory.createTitledBorder("Description of the Document"));
        outputText.setFont(new Font("Serif", Font.BOLD, 24));
        
         
        addMouseListener(new ScreenMouseListener());
        textField1.addMouseListener(new ScreenMouseListener());
        textField2.addMouseListener(new ScreenMouseListener());
        
       	setVisible(true);	
    }  
}

package com.assignment.oop;

import java.awt.event.*;
import javax.swing.*;
/**
 * Assignment. Topic: Robo-Reader
 * 30/03/2016
 * @author Nataliya Kizyuk
 * * *******************************
   Class that gets input and sets output to the RoboScreen, it extends RoboScreen Class
 */
public class RoboScreenInputOutput extends RoboScreen implements ActionListener
{
    //class attributes
    protected CheckTextDocName document;
    protected String docName = "";
    protected String exclWords = " ";
    protected String docDescription;
    
    // class constructor 
    public RoboScreenInputOutput(String title) 
    {
        super(title);
        super.textField1.addActionListener(this);
        super.textField2.addActionListener(this);
        super.button1.addActionListener(this);
        super.button2.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent event)
    {	
        try
        {
            if(event.getSource() == super.button1)//when button 1 is clicked
            {
                this.document = new CheckTextDocName();//instanciating Class CheckTextDocName
                this.docName  = this.document.CheckName(GetInput(super.textField1, this.docName));
                SetOutput(this.docName,this.exclWords);//calling method SetOutput()
                System.out.println("button1 clicked");   
            }
            else //when button 2 is clicked
            {
                if(!this.docName.isEmpty()) //and name of document is entered by user
                {
                    this.exclWords = GetInput(super.textField2, this.exclWords);
                    SetOutput(this.docName,this.exclWords);
                    System.out.println("button2 clicked"); 
                }
                else
                {
                    JOptionPane.showMessageDialog(this,"Please enter the name of the document first"); 
                } 
            }
        }
        catch (Exception e) 
        {
            System.out.println(e);
        }
    }  
    
    //Class method to get user's input form text field that takes in: JTextField and String. 
    //Assigning input to the String and returns the String
    public String GetInput(JTextField textField, String text)
    {
        textField.selectAll();
        text = textField.getText();
        JOptionPane.showMessageDialog(this, "You enter: \""+ text+"\"! "+"\r\n"
                                     +"Please press \"OK\" to continue or press \"x\" to exit");
        return text;
    }
    
    //Class method that gets required output and sets it to the textArea
    public void SetOutput(String input1, String input2)
    {
        //instanciating classes to read document and output description
        DocumentReader document = new DocumentReader();
        WordCounter getWords    = new WordCounter(document.ReadDocument(input1),input2.trim().replaceAll(",", " "));
        this.docDescription     = getWords.DisplayTenMostUsed();

        super.outputText.setText("");
        super.outputText.append("The document - "+input1+" is about: "+ "\n\r");
        super.outputText.append(this.docDescription.substring(0,this.docDescription.length()-2));//to remove last comma
        add(super.outputText);

        setVisible(true);
    }
}

package com.assignment.oop;

import java.awt.event.*;
import javax.swing.*;
/**
 * Assignment. Topic: Robo-Reader
 * 18/03/2016
 * @author Nataliya Kizyuk
 * * *******************************
   Class that contains method used by RoboScreen to implement MouseListener
 */
public class ScreenMouseListener extends JFrame implements MouseListener
{   
    @Override
    public void mouseClicked(MouseEvent e) 
    {
        System.out.println("mouse is working ");
        
        if( e.getSource()== RoboScreen.textField1)
        {  
           RoboScreen.textField1.selectAll();
           RoboScreen.textField1.setText("");
        }
        else if( e.getSource()== RoboScreen. textField2)
        {
            RoboScreen.textField2.selectAll();
            RoboScreen.textField2.setText("");
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Mouse clicked on empty space");
        }
    }

    @Override
    public void mousePressed(MouseEvent e) 
    {
  
    }

    @Override
    public void mouseReleased(MouseEvent e) 
    {
        
    }

    @Override
    public void mouseEntered(MouseEvent e)
    {
       
    }

    @Override
    public void mouseExited(MouseEvent e) 
    {

    }  
}


package com.assignment.oop;
/**
 * Assignment. Topic: Robo-Reader
 * 03/03/2016
 * @author Nataliya Kizyuk
 * * *******************************
   Class that checks if name of document is in correct format: document.txt
 */
public class CheckTextDocName 
{
    //class attributes
    private boolean returnVal;
    private String expectedInput;
    
    public String CheckName(String input)
    {
        try
        {
            //Checking if inputed String name is ending with ".txt"
            this.returnVal = input.endsWith(".txt");

            if(this.returnVal == false)
            {
                //add(concatenate)".txt" to a document name and save it to the String variable
                this.expectedInput = input.concat(".txt");

                System.out.println(this.expectedInput);    
            }
        }
            catch (Exception e) 
        {
            System.out.println(e);
        }
        return this.expectedInput.trim().toLowerCase();
    }  
}


package com.assignment.oop;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import static java.lang.Character.isAlphabetic;
import java.util.Scanner;
 /*
 * *******************************
 * Assignment. Topic: Robo-Reader
 * Date: 28/02/16
 * @author Nataliya Kizyuk
 * *******************************
 *Method: Read Document */
public class DocumentReader 
{
    //class attributes
    protected File myDocument;
    protected Scanner myScanner;
    protected String word;
    protected StringBuffer wordsString;
    
    public StringBuffer ReadDocument(String documentName)
    {
        try
        { 
            this.myDocument  =  new File(documentName);
            this.myScanner   =  new Scanner(this.myDocument);
            this.wordsString =  new StringBuffer();
            
            System.out.println(this.myScanner.hasNextLine());
            
            while(myScanner.hasNextLine())
            {
                //REFERENCE: http://alvinalexander.com/blog/post/java/remove-non-alphanumeric-characters-java-string
                this.word = myScanner.next().replaceAll("[^a-zA-Z]", "").toLowerCase(); // to remove all not letters

                this.wordsString.append(this.word).append(" ");  
            }
            this.myScanner.close();
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        
        return this.wordsString;
    }
}


package com.assignment.oop;

import java.util.ArrayList; //reference: https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html
import java.util.Collections;
 /*
 * *******************************
 * Assignment. Topic: Robo-Reader
 * Date: 01/03/16
 * @author Nataliya Kizyuk
 * *******************************
   Class that counts words occurences in the text
 */
public class WordCounter 
{ 
    //class attributes
    private String currentWord;
    private String nextWord;
    private IsUnhelpfulWord word;
    private String[] wordsArray;
    private StringBuilder docDescription;
    private ArrayList <Word> finalList; //arrayList of object - Class Word
    private int counter;
    
    //class constructor that takes in arguments:StringBuffer text(text from document),
    //                                          String excludedWords(words excluded by user)
    public WordCounter(StringBuffer text, String excludedWords)
    {
        this.finalList       = new ArrayList();//instanciating Class ArrayList
        this.wordsArray      = text.toString().split(" ");//converts string to string array
        this.docDescription  = new StringBuilder();
   
        try
        {   
            for (int i = 0; i < this.wordsArray.length; i++)
            {   //nested for loop to compare each word to all words of the array 
                this.currentWord = wordsArray[i];
                this.counter = 1;
                this.word = new IsUnhelpfulWord();//to check if current word is in the list of unhelpfull or excluded words
                if(!word.IsUnhelpfulWord(this.currentWord, excludedWords) && this.currentWord.length() > 2)
                {
                    for(int j = 0; j < this.wordsArray.length; j++)
                    {
                        this.nextWord = wordsArray[j];
                        if(this.currentWord.equals(this.nextWord))
                        {
                            this.counter++; 
                            this.wordsArray[j] = "";//remove word by assigning it to empty string
                        }   
                    }
                    Word word = new Word();//instanciating class Word
                    word.setWordValue(currentWord);
                    word.setWordOccurences(counter);
                  
                    this.finalList.add(word);
                }  
            }
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
    //method that returns ten most used words of the text document
    public String DisplayTenMostUsed()
    { 
        try
        {
        //reference for Collections: http://beginnersbook.com/2013/12/sort-arraylist-in-descending-order-in-java/
        Collections.sort(this.finalList, Collections.reverseOrder()); //to sort arrayList in descending order
        
        for(int i = 0; i < 10; i++)
        { 
            if(i == 4)//to divide string into two lines
            {
                this.currentWord = this.finalList.get(i).toString().concat("\r\n");
            }
            else
            {
                this.currentWord = this.finalList.get(i).toString().concat(",  ");
            }
            this.docDescription.append(this.currentWord.toUpperCase());
        } 
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        return this.docDescription.toString();
    }
}


package com.assignment.oop;
/*
 * *******************************
 * Assignment. Topic: Robo-Reader
 * Date: 02/03/16
 * @author Nataliya Kizyuk
 * *******************************
  Class Word that is object of ArrayList
 *reference: http://beginnersbook.com/2013/12/java-arraylist-of-object-sort-example-comparable-and-comparator/*/
public final class Word implements Comparable<Word>
{
    //class attributes
    private String wordValue;
    private int    wordOccurences;
    
    // class constructor  
    public Word() 
    {
        this.setWordValue(wordValue);
        this.setWordOccurences(wordOccurences);   
    }
    
    @Override //method that compares word's occurences from reference above
    public int compareTo(Word compareWord) 
    {
        int compareOccurences =((Word)compareWord).getWordOccurences();

        /* For Descending order */
        return this.wordOccurences - compareOccurences;
    }
    
   @Override // method that returns string in format: word (occurences)
    public String toString() 
    {
        return this.wordValue+"("+Integer.toString(this.wordOccurences)+")";
    }

    /**
     * @return the wordValue
     */
    public String getWordValue() 
    {
        return wordValue;
    }

    /**
     * @param wordValue the wordValue to set
     */
    public void setWordValue(String wordValue) 
    {
        this.wordValue = wordValue;
    }

    /**
     * @return the wordNumber
     */
    public int getWordOccurences() 
    {
        return wordOccurences;
    }

    /**
     * @param wordOccurences the wordNumber to set
     */
    public void setWordOccurences(int wordOccurences) 
    {
        this.wordOccurences = wordOccurences;
    }
}


package com.assignment.oop;
/**
 * Assignment. Topic: Robo-Reader
 * 30/03/2016
 * @author Nataliya Kizyuk
 * * *******************************
   Class that contains array of unhelpful words and checks if passed word is unhelpful
 */
public class IsUnhelpfulWord 
{
    //class attributes
    private String[] unhelpfulWords;
    private String wordString;
    private boolean index;
    
    //method that takes in parameters: word and excludedByUserWords and returns: true or false
    public boolean IsUnhelpfulWord(String word, String excludedByUser )
    {
        try
        {
            this.wordString = "all are was were which has and for with you your "
                            + "him his she her our its the that they them their "
                            + "there this those ";
            //adds excluded words to wordString and converts the string to array of strings
            this.unhelpfulWords = this.wordString.concat(excludedByUser).split(" ");
            for (int i = 0; i < this.unhelpfulWords.length; i++) 
            {
                if (this.unhelpfulWords[i].trim().compareToIgnoreCase(word.trim()) == 0)
                {
                    this.index = true;
                    break;
                } 
                else 
                {
                    this.index = false; 
                }
            }
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        return this.index;
    }
}
